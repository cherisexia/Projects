# -*- coding: utf-8 -*-
"""
Created on Tue Dec 14 01:42:42 2021

@author: XPS
"""

import numpy as np
import matplotlib.pyplot as plt
import copy
import networkx as nx
import random
import matplotlib.animation as animation
from IPython.display import HTML,display
from itertools import combinations
from transmission_functions import *
from attributes import *
import timeit
import pandas as pd
import igraph as ig

ig_net = ig.load(r"testnetwork.gml")
network = ig_net.to_networkx()

#%% Plotting the Neighbor counts for each node
N = nx.Graph.number_of_nodes(network)
N_edges = nx.Graph.number_of_edges(network)
contact_rate = N_edges*2/N
neighbor_count = []
for i in range(N):
    neighbor_count.append(len(network[i]))
plt.figure(0)
plt.plot(range(N),neighbor_count)
plt.xlabel('Node number')
plt.ylabel('Neighbor Count')
plt.title("Mean contact rate = %r"%(contact_rate))
plt.show()

plt.figure(1)
plt.hist(LT_dist, bins=100)
plt.xlabel('Neighbor Count')
plt.ylabel('Node number')
plt.title("Mean contact rate = %r"%(contact_rate))
plt.show()

#%% Printing the attributes of the network
print(Network_type)
if Network_type == 'Villages':
    n_villages = len(pop)  # Number of villages
    total_pop = sum(pop)
    print('Number of villages =', n_villages)
    print('Total population of the villages',total_pop)


N = nx.Graph.number_of_nodes(network)
N_edges = nx.Graph.number_of_edges(network)
contact_rate = N_edges*2/N
print('Nodes created in the end =', N)
print('Edges created in the end =', N_edges)
print('Average contact rate r =', contact_rate)
# R_0 (basic reproductive number): the average number of secondary infections generated by a single infected individual introduced into a susceptible population
R_0 = contact_rate*beta_mu/(gamma+mortality) # contact rate * average weighted infection rate * average removing period
print('R_0 = ',R_0)

# Check whether the network is fully connected
print('Number of unconnected ppl:', N - len(list(nx.connected_components(network))[0]), ' - Just checking if the network is legit')

for i in network.nodes:
    if network.nodes[i]['state'] == 'I':
        print('Initially infected ppl:',i)

#%% Clustering distribution
cluster_dist = dict(nx.clustering(network)).values()
plt.hist(cluster_dist, bins = 50)
plt.title('Clustering distribution')
plt.xlabel('Clustering')
plt.ylabel('Entries')
plt.xlim([0,0.25])


